<div class="min-h-screen bg-gray-50">
  <!-- Header -->
  <header class="bg-white shadow">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Financial Advisor AI Assistant</h1>
          <p class="text-gray-600">Manage your clients, emails, calendar, and tasks with AI assistance</p>
        </div>
        
        <!-- Chat Button -->
        <button 
          id="open-chat-btn"
          class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 font-medium transition-colors cursor-pointer"
        >
          <%= inline_svg "icons/bot.svg", class: "w-5 h-5" %>
          Open AI Chat
        </button>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- User Info & Quick Actions -->
    <div class="bg-white rounded-lg shadow p-6 mb-8">
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center space-x-4">
          <div class="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center">
            <span class="text-white text-xl font-bold">
              <%= @user.first_name&.first&.upcase || @user.email_address&.first&.upcase %>
            </span>
          </div>
          <div>
            <h2 class="text-xl font-semibold text-gray-900">
              <%= [@user.first_name, @user.last_name].compact.join(' ').presence || 'User' %>
            </h2>
            <p class="text-gray-600"><%= @user.email_address %></p>
            <p class="text-sm text-gray-500">
              Member since <%= @user.created_at.strftime("%B %Y") %>
            </p>
          </div>
        </div>
        
        <!-- Logout Button -->
        <%= button_to session_path, method: :delete, class: "bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg flex items-center gap-2 transition-colors cursor-pointer" do %>
          <%= inline_svg "icons/logout.svg", class: "w-4 h-4" %>
          Sign Out
        <% end %>
      </div>

    </div>

    <!-- Pull Latest Data Action -->
    <% if @google_connected || @hubspot_connected %>
      <%= button_to pull_data_path, method: :post, class: "w-full bg-blue-600 hover:bg-blue-700 text-white p-4 rounded-lg flex items-center justify-center gap-3 transition-colors cursor-pointer mb-8" do %>
        <%= inline_svg "icons/download.svg", class: "w-6 h-6" %>
        <div class="text-center">
          <div class="font-medium text-lg">Pull Latest Data</div>
          <div class="text-sm opacity-90">Sync from Google & HubSpot</div>
        </div>
      <% end %>
    <% else %>
      <div class="w-full bg-gray-100 border border-gray-200 text-gray-500 p-4 rounded-lg flex items-center justify-center gap-3 mb-8">
        <%= inline_svg "icons/download.svg", class: "w-6 h-6" %>
        <div class="text-center">
          <div class="font-medium text-lg">Pull Latest Data</div>
          <div class="text-sm">Connect accounts first</div>
        </div>
      </div>
    <% end %>

    <!-- Data Sections -->
    <div class="space-y-6">
      <!-- Google Account Section -->
      <div class="bg-white rounded-lg shadow">
        <div class="p-6 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <%= inline_svg "icons/google.svg", class: "w-8 h-8" %>
              <div>
                <h3 class="text-lg font-semibold text-gray-900">Google Account</h3>
                <p class="text-sm text-gray-600">Gmail & Calendar integration</p>
              </div>
            </div>
            <div class="flex items-center gap-4">
              <% if @google_connected %>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  Connected
                </span>
                <%= button_to disconnect_google_path, method: :delete, class: "text-red-600 hover:text-red-700 text-sm font-medium cursor-pointer" do %>
                  Disconnect
                <% end %>
              <% else %>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                  Not Connected
                </span>
                <%= link_to "/auth/google_oauth2", class: "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer" do %>
                  Connect Google
                <% end %>
              <% end %>
            </div>
          </div>
        </div>

        <% if @google_connected %>
          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Recent Emails -->
              <div>
                <div class="flex items-center justify-between mb-4">
                  <h4 class="font-medium text-gray-900">Recent Emails (<%= @stats[:emails] %> total)</h4>
                  <%= button_to import_google_emails_path, method: :post, class: "text-blue-600 hover:text-blue-700 text-sm font-medium cursor-pointer" do %>
                    Import Now
                  <% end %>
                </div>
                <div class="space-y-2">
                  <% if @recent_emails.any? %>
                    <% @recent_emails.each do |email| %>
                      <div class="text-sm p-3 bg-gray-50 rounded">
                        <div class="font-medium text-gray-900 truncate"><%= email.subject %></div>
                        <div class="text-gray-600 text-xs">From: <%= email.from_email %></div>
                        <div class="text-gray-500 text-xs"><%= time_ago_in_words(email.received_at) %> ago</div>
                      </div>
                    <% end %>
                  <% else %>
                    <div class="text-gray-500 text-sm italic">No emails imported yet</div>
                  <% end %>
                </div>
              </div>

              <!-- Upcoming Calendar Events -->
              <div>
                <div class="flex items-center justify-between mb-4">
                  <h4 class="font-medium text-gray-900">Upcoming Events (<%= @stats[:calendar_events] %> total)</h4>
                  <%= button_to import_google_calendar_path, method: :post, class: "text-blue-600 hover:text-blue-700 text-sm font-medium cursor-pointer" do %>
                    Import Now
                  <% end %>
                </div>
                <div class="space-y-2">
                  <% if @upcoming_events.any? %>
                    <% @upcoming_events.each do |event| %>
                      <div class="text-sm p-3 bg-gray-50 rounded">
                        <div class="font-medium text-gray-900 truncate"><%= event.title %></div>
                        <div class="text-gray-600 text-xs">
                          <%= event.start_time.strftime("%b %d, %Y at %I:%M %p") %>
                        </div>
                        <% if event.location.present? %>
                          <div class="text-gray-500 text-xs">üìç <%= event.location %></div>
                        <% end %>
                      </div>
                    <% end %>
                  <% else %>
                    <div class="text-gray-500 text-sm italic">No upcoming events</div>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>

      <!-- HubSpot Section -->
      <div class="bg-white rounded-lg shadow">
        <div class="p-6 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <%= inline_svg "icons/users.svg", class: "w-8 h-8" %>
              <div>
                <h3 class="text-lg font-semibold text-gray-900">HubSpot CRM</h3>
                <p class="text-sm text-gray-600">Customer relationship management</p>
              </div>
            </div>
            <div class="flex items-center gap-4">
              <% if @hubspot_connected %>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  Connected
                </span>
                <%= button_to disconnect_hubspot_path, method: :delete, class: "text-red-600 hover:text-red-700 text-sm font-medium cursor-pointer" do %>
                  Disconnect
                <% end %>
              <% else %>
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                  Not Connected
                </span>
                <%= link_to "/auth/hubspot", class: "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer" do %>
                  Connect HubSpot
                <% end %>
              <% end %>
            </div>
          </div>
        </div>

        <% if @hubspot_connected %>
          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Recent Contacts -->
              <div>
                <div class="flex items-center justify-between mb-4">
                  <h4 class="font-medium text-gray-900">Recent Contacts (<%= @stats[:hubspot_contacts] %> total)</h4>
                  <%= button_to import_hubspot_contacts_path, method: :post, class: "text-blue-600 hover:text-blue-700 text-sm font-medium cursor-pointer" do %>
                    Import Now
                  <% end %>
                </div>
                <div class="space-y-2">
                  <% if @recent_contacts.any? %>
                    <% @recent_contacts.each do |contact| %>
                      <div class="text-sm p-3 bg-gray-50 rounded">
                        <div class="font-medium text-gray-900">
                          <%= [contact.first_name, contact.last_name].compact.join(' ') %>
                        </div>
                        <% if contact.email.present? %>
                          <div class="text-gray-600 text-xs">üìß <%= contact.email %></div>
                        <% end %>
                        <% if contact.company.present? %>
                          <div class="text-gray-500 text-xs">üè¢ <%= contact.company %></div>
                        <% end %>
                      </div>
                    <% end %>
                  <% else %>
                    <div class="text-gray-500 text-sm italic">No contacts imported yet</div>
                  <% end %>
                </div>
              </div>

              <!-- Notes Summary -->
              <div>
                <div class="flex items-center justify-between mb-4">
                  <h4 class="font-medium text-gray-900">Notes (<%= @stats[:hubspot_notes] %> total)</h4>
                  <%= button_to import_hubspot_notes_path, method: :post, class: "text-blue-600 hover:text-blue-700 text-sm font-medium cursor-pointer" do %>
                    Import Now
                  <% end %>
                </div>
                <div class="text-sm text-gray-600">
                  <p>üìù Total notes: <%= @stats[:hubspot_notes] %></p>
                  <p class="text-xs text-gray-500 mt-2">Notes are imported and processed for AI context</p>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>

      <!-- Tasks Section -->
      <div class="bg-white rounded-lg shadow">
        <div class="p-6 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <%= inline_svg "icons/check.svg", class: "w-8 h-8" %>
              <div>
                <h3 class="text-lg font-semibold text-gray-900">Tasks</h3>
                <p class="text-sm text-gray-600">AI-created and user tasks</p>
              </div>
            </div>
            <div class="text-sm text-gray-600">
              <%= @stats[:pending_tasks] %> pending, <%= @stats[:tasks] %> total
            </div>
          </div>
        </div>

        <div class="p-6">
          <div class="space-y-2">
            <% if @pending_tasks.any? %>
              <% @pending_tasks.each do |task| %>
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
                  <div class="flex-1">
                    <div class="font-medium text-gray-900"><%= task.title %></div>
                    <% if task.description.present? %>
                      <div class="text-sm text-gray-600"><%= task.description.truncate(100) %></div>
                    <% end %>
                    <div class="text-xs text-gray-500 mt-1">
                      Priority: <%= task.priority.capitalize %>
                      <% if task.due_date %>
                        ‚Ä¢ Due: <%= task.due_date.strftime("%b %d, %Y") %>
                      <% end %>
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      <%= task.status.humanize %>
                    </span>
                  </div>
                </div>
              <% end %>
            <% else %>
              <div class="text-gray-500 text-sm italic text-center py-8">
                No pending tasks. Create some tasks by chatting with the AI!
              </div>
            <% end %>
          </div>
        </div>
      </div>

      <!-- Activity Logs Section -->
      <div class="bg-white rounded-lg shadow">
        <div class="p-6 border-b border-gray-200">
          <div class="flex items-center gap-3">
            <%= inline_svg "icons/clipboard.svg", class: "w-8 h-8" %>
            <div>
              <h3 class="text-lg font-semibold text-gray-900">AI Activity Logs</h3>
              <p class="text-sm text-gray-600">Recent tool executions and actions</p>
            </div>
          </div>
        </div>

        <div class="divide-y divide-gray-200">
          <% if @recent_action_logs.any? %>
            <% @recent_action_logs.each do |log| %>
              <div class="px-6 py-4">
                <div class="flex items-center justify-between">
                  <div class="flex-1">
                    <div class="flex items-center gap-2">
                      <span class="text-sm font-medium text-gray-900"><%= log.tool_name %></span>
                      <% if log.result&.dig("success") %>
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          Success
                        </span>
                      <% else %>
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                          Failed
                        </span>
                      <% end %>
                    </div>
                    <div class="text-xs text-gray-600 mt-1">
                      <%= time_ago_in_words(log.created_at) %> ago
                    </div>
                    <% if log.result&.dig("message") %>
                      <div class="text-xs text-gray-500 mt-1">
                        <%= log.result["message"].truncate(100) %>
                      </div>
                    <% end %>
                  </div>
                </div>
              </div>
            <% end %>
          <% else %>
            <div class="px-6 py-8 text-center text-gray-500 text-sm italic">
              No AI activity yet. Start chatting to see tool executions here!
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </main>
</div>

<!-- Chat Popup Modal (initially hidden) -->
<div id="chat-modal" class="fixed inset-0 z-50 hidden" style="overflow: hidden;">
  <!-- Backdrop -->
  <div class="fixed inset-0 bg-black/20 cursor-pointer" id="chat-backdrop"></div>
  
  <!-- Modal -->
  <div class="fixed inset-4 md:inset-8 lg:inset-16 bg-white/95 backdrop-blur-sm rounded-lg shadow-xl" style="display: flex; flex-direction: column; overflow: hidden; max-height: calc(100vh - 64px);">
    <!-- Chat content will be loaded here -->
    <div id="modal-content" style="flex: 1; display: flex; flex-direction: column; overflow: hidden; height: 100%;">
      <!-- Loading state -->
      <div style="flex: 1; display: flex; align-items: center; justify-content: center;">
        <div style="color: #6b7280;">Loading chat...</div>
      </div>
    </div>
  </div>
</div>

<script>
// Clean, simple chat modal implementation
document.addEventListener('DOMContentLoaded', function() {
  const openChatBtn = document.getElementById('open-chat-btn');
  const chatModal = document.getElementById('chat-modal');
  const chatBackdrop = document.getElementById('chat-backdrop');
  const chatContent = document.getElementById('modal-content');
  
  function openChatModal() {
    document.body.style.overflow = 'hidden';
    chatModal.classList.remove('hidden');
    
    fetch('/chat_interface')
      .then(response => response.text())
      .then(html => {
        chatContent.innerHTML = html;
        initChatModal();
      })
      .catch(error => {
        chatContent.innerHTML = '<div style="flex: 1; display: flex; align-items: center; justify-content: center;"><div style="color: #ef4444;">Error loading chat</div></div>';
      });
  }
  
  function closeChatModal() {
    document.body.style.overflow = '';
    chatModal.classList.add('hidden');
  }
  
  // Clean chat modal implementation
  function initChatModal() {
    const modal = {
      elements: {
        chatTab: document.getElementById('chat-tab'),
        historyTab: document.getElementById('history-tab'),
        chatContent: document.getElementById('chat-content'),
        historyContent: document.getElementById('history-content'),
        closeBtn: document.getElementById('close-chat-btn'),
        sendBtn: document.getElementById('send-btn'),
        messageInput: document.getElementById('message-input'),
        chatForm: document.getElementById('chat-form'),
        messagesContainer: document.querySelector('.messages-container'),
        newThreadBtn: document.getElementById('new-thread-btn')
      },
      
      init() {
        this.bindEvents();
        this.showChatTab();
        if (this.elements.messageInput) this.elements.messageInput.focus();
        
        // Set initial highlight for current chat
        const currentChatId = document.getElementById('current-chat-id')?.value;
        if (currentChatId) {
          this.updateHistoryHighlight(currentChatId);
        }
        
        // Auto-scroll to bottom on opening
        this.scrollToBottom();
      },
      
      bindEvents() {
        if (this.elements.chatTab) {
          this.elements.chatTab.onclick = () => this.showChatTab();
        }
        
        if (this.elements.historyTab) {
          this.elements.historyTab.onclick = (e) => {
              e.preventDefault();
              this.showHistoryTab();
          }
        }
        
        if (this.elements.closeBtn) {
          this.elements.closeBtn.onclick = () => closeChatModal();
        }
        
        if (this.elements.sendBtn) {
          this.elements.sendBtn.onclick = (e) => {
            e.preventDefault();
            this.sendMessage();
          };
        }
        
        if (this.elements.chatForm) {
          this.elements.chatForm.onsubmit = (e) => {
            e.preventDefault();
            this.sendMessage();
          };
        }
        
        if (this.elements.messageInput) {
          this.elements.messageInput.onkeydown = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              this.sendMessage();
            }
          };
        }
        
        if (this.elements.newThreadBtn) {
          this.elements.newThreadBtn.onclick = () => this.newThread();
        }
        
        // History item clicks
        document.querySelectorAll('.chat-history-item').forEach(item => {
          item.onclick = () => {
            const chatId = item.getAttribute('data-chat-id');
            if (chatId) {
              this.loadChat(chatId);
              this.showChatTab();
            }
          };
        });
      },
      
      showChatTab() {
        this.elements.chatContent.classList.remove('hidden');
        this.elements.chatContent.classList.add('flex');
        this.elements.historyContent.classList.add('hidden');
        this.elements.historyContent.classList.remove('flex');
        
        this.elements.chatTab.className = 'tab-button active-tab py-4 mr-8 border-none bg-transparent text-base font-medium cursor-pointer border-b-2 border-gray-900 text-gray-900';
        this.elements.historyTab.className = 'tab-button py-4 border-none bg-transparent text-base font-normal cursor-pointer border-b-2 border-transparent text-gray-500';
        
        if (this.elements.messageInput) this.elements.messageInput.focus();
      },
      
      showHistoryTab() {
        this.elements.historyContent.classList.remove('hidden');
        this.elements.historyContent.classList.add('flex');
        this.elements.chatContent.classList.add('hidden');
        this.elements.chatContent.classList.remove('flex');

        this.elements.historyTab.className = 'tab-button py-4 border-none bg-transparent text-base font-medium cursor-pointer border-b-2 border-gray-900 text-gray-900';
        this.elements.chatTab.className = 'tab-button active-tab py-4 mr-8 border-none bg-transparent text-base font-normal cursor-pointer border-b-2 border-transparent text-gray-500';
      },
      
      newThread() {
        const chatIdInput = document.getElementById('current-chat-id');
        if (chatIdInput) chatIdInput.value = '';
        
        this.elements.messagesContainer.innerHTML = `
          <div class="mb-3">
            <div class="bg-gray-100 rounded-xl p-3 max-w-[80%]">
              <p class="text-gray-900 text-sm m-0 leading-snug">I can answer questions about any Jump meeting. What do you want to know?</p>
            </div>
          </div>
        `;
        
        this.showChatTab();
        this.updateChatTitle("New Chat");
      },
      
      async loadChat(chatId) {
        const chatIdInput = document.getElementById('current-chat-id');
        if (chatIdInput) chatIdInput.value = chatId;
        
        try {
          const response = await fetch(`/chats/${chatId}`, {
            headers: {
              'Accept': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });
          
          const data = await response.json();
          
          this.elements.messagesContainer.innerHTML = `
            <div class="mb-3">
              <div class="bg-gray-100 rounded-xl p-3 max-w-[80%]">
                <p class="text-gray-900 text-sm m-0 leading-snug">I can answer questions about any Jump meeting. What do you want to know?</p>
              </div>
            </div>
          `;
          
          if (data.messages) {
            data.messages.forEach(message => {
              this.addMessage(message.role, message.content);
            });
          }
          
          this.scrollToBottom();
          this.updateHistoryHighlight(chatId);
          this.updateChatTitle(data.chat.title);
        } catch (error) {
          console.error('Error loading chat:', error);
        }
      },
      
      async sendMessage() {
        const content = this.elements.messageInput.value.trim();
        if (!content) return;
        
        const chatId = document.getElementById('current-chat-id')?.value;
        this.elements.messageInput.value = '';
        
        this.addMessage('user', content);
        
        try {
          const url = chatId ? `/chats/${chatId}/messages` : '/messages';
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ message: { content } })
          });
          
          const data = await response.json();
          
          if (data.ai_message) {
            this.addMessage('assistant', data.ai_message.content);
          }
          
          if (data.chat_id) {
            const chatIdInput = document.getElementById('current-chat-id');
            if (chatIdInput) chatIdInput.value = data.chat_id;
            
            // If this is a new chat, refresh the history
            if (!chatId) {
              this.refreshHistory();
            }
            
            // Update highlight for current chat
            this.updateHistoryHighlight(data.chat_id);
            
            // Update chat title if it's provided
            if (data.chat_title) {
              this.updateChatTitle(data.chat_title);
            }
          }
        } catch (error) {
          console.error('Error sending message:', error);
          this.addMessage('assistant', 'Sorry, I encountered an error. Please try again.');
        }
      },
      
      addMessage(role, content) {
        const messageDiv = document.createElement('div');
        
        if (role === 'user') {
          messageDiv.className = 'mb-3 flex justify-end';
          messageDiv.innerHTML = `
            <div class="bg-gray-200 max-w-[80%] rounded-xl p-3">
              <p class="text-gray-900 text-sm m-0 leading-snug">${content}</p>
            </div>
          `;
        } else {
          messageDiv.className = 'mb-3';
          messageDiv.innerHTML = `
            <div class="bg-gray-100 max-w-[80%] rounded-xl p-3">
              <p class="text-gray-900 text-sm m-0 leading-snug">${content}</p>
            </div>
          `;
        }
        
        this.elements.messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
      },
      
      scrollToBottom() {
        this.elements.messagesContainer.scrollTop = this.elements.messagesContainer.scrollHeight;
      },
      
      async refreshHistory() {
        try {
          const response = await fetch('/chat_interface', {
            headers: {
              'Accept': 'text/html',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          });
          
          const html = await response.text();
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;
          
          const newHistoryList = tempDiv.querySelector('#chat-history-list');
          const currentHistoryList = document.getElementById('chat-history-list');
          
          if (newHistoryList && currentHistoryList) {
            currentHistoryList.innerHTML = newHistoryList.innerHTML;
            
            // Rebind history item clicks
            document.querySelectorAll('.chat-history-item').forEach(item => {
              item.onclick = () => {
                const chatId = item.getAttribute('data-chat-id');
                if (chatId) {
                  this.loadChat(chatId);
                  this.showChatTab();
                }
              };
            });
            
            // Update highlight for current chat
            const currentChatId = document.getElementById('current-chat-id')?.value;
            if (currentChatId) {
              this.updateHistoryHighlight(currentChatId);
            }
          }
        } catch (error) {
          console.error('Error refreshing history:', error);
        }
      },
      
      updateHistoryHighlight(currentChatId) {
        document.querySelectorAll('.chat-history-item').forEach(item => {
          const chatId = item.getAttribute('data-chat-id');
          if (chatId === currentChatId) {
            item.className = 'chat-history-item p-4 bg-blue-50 border-blue-500 rounded-xl cursor-pointer border mb-3';
          } else {
            item.className = 'chat-history-item p-4 bg-white border-gray-200 rounded-xl cursor-pointer border mb-3';
          }
        });
      },
      
      updateChatTitle(title) {
        const chatTitleElement = document.getElementById('chat-title');
        if (chatTitleElement) {
          chatTitleElement.textContent = title || 'New Chat';
        }
      }
    };
    
    modal.init();
  }
  
  openChatBtn.addEventListener('click', openChatModal);
  chatBackdrop.addEventListener('click', closeChatModal);
  
  // Close on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && !chatModal.classList.contains('hidden')) {
      closeChatModal();
    }
  });
});
</script>
